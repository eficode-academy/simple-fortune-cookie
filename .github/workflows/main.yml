name: Main workflow
on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
jobs:
  test_frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Clone down repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.18' # Same Go version as the Docker files

      - name: Install dependencies
        run: go mod tidy
        working-directory: ./frontend

      - name: Build Frontend app
        run: go build -o app .
        working-directory: ./frontend
      
      - name: Run tests
        run: go test -v .
        working-directory: ./frontend
        
  build_frontend_and_backend:
    name: Build Frontend and Backend images
    runs-on: ubuntu-latest
    steps:
        # Get code
      - name: Clone down repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

        # Build images
      - name: Build Docker images
        run: docker compose build

        # Test if we can start the services
      - name: Service health check
        run: docker compose up -d

      - name: Waiting for services to start
        run: |
          echo "Waiting for services to be healthy..."
          for i in {1..10}; do
            unhealthy=$(docker-compose ps | grep -E "unhealthy|starting" | wc -l)
            if [ $unhealthy -eq 0 ]; then
              echo "All services are healthy."
              break
            fi
            echo "Some services are not yet healthy. Retrying in 10 seconds..."
            sleep 10
          done
          if [ $unhealthy -ne 0 ]; then
            echo "Services did not become healthy in time."
            docker-compose ps
            exit 1
          fi
      
        # Always stop the services no matter if they started or not
      - name: Stop services
        if: always()
        run: docker compose down

        # Push to Docker hub
      - name: Authenticating with Docker Hub
        uses: docker/login-action@v2
        with:
          username: mpldocker
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Backend Image to Docker Hub
        run: docker push mpldocker/backend:latest

      - name: Push Frontend Image to Docker Hub
        run: docker push mpldocker/frontend:latest
