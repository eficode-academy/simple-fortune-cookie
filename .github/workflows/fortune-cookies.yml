name: CICD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
    - "main"
    - "dev**"
env:
  docker_username: ${{ secrets.DOCKER_USERNAME }}
  docker_password: ${{ secrets.DOCKER_PASSWORD }}
  GIT_COMMIT: ${{ github.sha }}


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Docker-image:
    on: push
jobs:
  Docker-image-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Download code
      uses: actions/download-artifact@v1
      with:
        name: code
        path: .
    - name: build docker
      run: chmod +x ci/build-docker-frontend.sh && ci/build-docker-frontend.sh
    - name: push docker
      run: chmod +x ci/push-docker.sh && ci/push-docker.sh

  Docker-image-backend:
    runs-on: ubuntu-latest
    steps:
    - name: Download code
      uses: actions/download-artifact@v1
      with:
        name: code
        path: .
    - name: build docker
      run: chmod +x ci/build-docker-backend.sh && ci/build-docker-backend.sh
    - name: push docker
      run: chmod +x ci/push-docker.sh && ci/push-docker.sh

  # The "build" workflow
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    # Setup Go
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.14.0' # The Go version to download (if necessary) and use.
    
    # Install all the dependencies
    - name: Install dependencies
      run: |
        go version
        go get -u golang.org/x/lint/golint
        
    # Run build of the application
    - name: Run build
      run: cd frontend/ && go build  
      
    # Run testing on the code
    - name: Run testing
      run: cd frontend/ && go test 
      #
    
    